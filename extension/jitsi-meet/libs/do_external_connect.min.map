{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/jitsi-meet-logger/lib/Logger.js","webpack:///./react/features/base/config/parseURLParams.js","webpack:///./react/features/base/util/helpers.js","webpack:///./react/features/base/util/httpUtils.js","webpack:///./react/features/base/util/uri.js","webpack:///./node_modules/jitsi-meet-logger/lib/LogCollector.js","webpack:///./node_modules/jitsi-meet-logger/lib/index.js","webpack:///./react/features/base/util/loadScript.web.js","webpack:///./react/features/base/util/randomUtil.js","webpack:///./react/features/base/util/index.js","webpack:///./react/features/base/config/getRoomName.js","webpack:///./connection_optimization/do_external_connect.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","levels","trace","debug","info","log","warn","error","Logger","consoleTransport","console","globalTransports","logger","arguments","level","args","Array","slice","callerInfo","methodName","fileLocation","line","column","Error","stack","split","length","match","indexOf","substr","getCallerInfo","transports","concat","id","apply","format","this","methods","keys","addGlobalTransport","transport","push","removeGlobalTransport","transportIdx","splice","setLevel","TRACE","DEBUG","INFO","LOG","WARN","ERROR","__webpack_exports__","parseURLParams","_util__WEBPACK_IMPORTED_MODULE_0__","url","dontParse","undefined","paramStr","search","hash","params","forEach","part","param","JSON","parse","decodeURIComponent","replace","e","reportError","String","__filename","getJitsiMeetGlobalNS","assignIfDefined","require","getLogger","window","JitsiMeetJS","app","target","source","to","nextKey","msg","onerror","doGetJSON","fetch","then","response","jsonify","json","ok","result","Promise","reject","catch","APP_LINK_SCHEME","_ROOM_EXCLUDE_PATTERN","_URI_AUTHORITY_PATTERN","_URI_PATH_PATTERN","URI_PROTOCOL_PATTERN","_fixURIStringScheme","uri","regex","RegExp","exec","protocol","toLowerCase","substring","lastIndex","startsWith","getLocationContextRoot","_ref","pathname","contextRootEndIndex","lastIndexOf","_objectToURLParamsArray","obj","encodeURIComponent","stringify","parseStandardURIString","str","toString","_standardURIToString","authority","userinfoEndIndex","host","portBeginIndex","port","hostname","hashBeginIndex","parseURIString","contextRoot","room","fixedRoom","_fixRoom","thiz","_ref2","toURLString","_typeof","URL","href","scheme","endsWith","domain","_parseStandardURIStri","roomName","jwt","_arr","_i","configName","urlParamsArray","urlParamsString","join","urlObjectToString","LogCollector","logStorage","options","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","queue","totalLen","outputCache","someObject","formatLogMessage","len","arg","prevMessage","text","count","_flush","start","_reschedulePublishInterval","clearTimeout","setTimeout","flush","force","reschedule","isReady","cachedQueue","storeLogs","stop","idLoggers","loggers","curLevel","setLogLevelById","setLogLevel","loadScript","resolve","util","ScriptUtil","HEX_DIGITS","randomElement","arr","randomInt","randomHexString","_randomString","min","max","Math","floor","random","characters","helpers","httpUtils","getRoomName","getroomnode","config","path","location","_react_features_base_config_getRoomName__WEBPACK_IMPORTED_MODULE_0__","_react_features_base_config_parseURLParams__WEBPACK_IMPORTED_MODULE_1__","createConnectionExternally","externalConnectUrl","isRecorder","token","connectionInfo","XMPPAttachInfo","status","data","checkForConnectHandlerAndConnect","errorCallback","APP","connect","handler"],"mappings":"aACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,SAIAlC,IAAAmC,EAAA,yBChEA,IAAAC,EAAA,CACAC,MAAA,EACAC,MAAA,EACAC,KAAA,EACAC,IAAA,EACAC,KAAA,EACAC,MAAA,GAOAC,EAAAC,iBAAAC,QAMA,IAAAC,EAAA,CAAAH,EAAAC,kBAyEA,SAAAJ,IACA,IAAAO,EAAAC,UAAA,GAAAC,EAAAD,UAAA,GACAE,EAAAC,MAAAnB,UAAAoB,MAAA7C,KAAAyC,UAAA,GACA,KAAAZ,EAAAa,GAAAF,EAAAE,OAMA,IAFA,IAAAI,EAjDA,WACA,IAAAA,EAAA,CACAC,WAAA,GACAC,aAAA,GACAC,KAAA,KACAC,OAAA,MAGAf,EAAA,IAAAgB,MACAC,EAAAjB,EAAAiB,MAAAjB,EAAAiB,MAAAC,MAAA,SACA,IAAAD,KAAAE,OAAA,EACA,OAAAR,EAEA,IAAA7C,EAAA,KAIA,OAHAmD,EAAA,KACAnD,EAAAmD,EAAA,GAAAG,MAAA,iDAEAtD,KAAAqD,QAAA,GAEA,IAAAF,EAAA,GAAAI,QAAA,QAEAV,EAAAC,WAAAK,EAAA,GAAAK,OAAA,EAAAL,EAAA,GAAAI,QAAA,MAGAV,EAAAC,WAAAK,EAAA,GAAAK,OAAA,EAAAL,EAAA,GAAAI,QAAA,MAEAV,IAGAA,EAAAC,WAAA9C,EAAA,GACA6C,EAAAE,aAAA/C,EAAA,GACA6C,EAAAG,KAAAhD,EAAA,GACA6C,EAAAI,OAAAjD,EAAA,GACA6C,GAgBAY,GACAC,EAAApB,EAAAqB,OAAApB,EAAAmB,YACA9D,EAAA,EAAkBA,EAAA8D,EAAAL,OAAuBzD,IAAA,CACzC,IAAAkB,EAAA4C,EAAA9D,GACAC,EAAAiB,EAAA2B,GACA5C,GAAA,sBACAA,EAAAuB,KAAAN,EAAAyB,EAAAqB,GAAA,IAAArB,EAAAqB,GAAA,WAAAf,EAAAC,WAAA,OACAe,MAAA/C,EAAA4B,IAcA,SAAAP,EAAAM,EAAAmB,EAAAF,EAAAI,GACAC,KAAAH,KACAG,KAAAD,SACAC,KAAAL,aACAK,KAAAL,aACAK,KAAAL,WAAA,IAEAK,KAAAtB,MAAAb,EAAAa,GAEA,IADA,IAAAuB,EAAA1D,OAAA2D,KAAArC,GACAhC,EAAA,EAAkBA,EAAAoE,EAAAX,OAAoBzD,IACtCmE,KAAAC,EAAApE,IACAoC,EAAAZ,KAAA,KAAA2C,KAAAC,EAAApE,IAzGAuC,EAAA+B,mBAAA,SAAAC,IACA,IAAA7B,EAAAiB,QAAAY,IACA7B,EAAA8B,KAAAD,IASAhC,EAAAkC,sBAAA,SAAAF,GACA,IAAAG,EAAAhC,EAAAiB,QAAAY,IACA,IAAAG,GACAhC,EAAAiC,OAAAD,EAAA,IAmGAnC,EAAAX,UAAAgD,SAAA,SAAA/B,GACAsB,KAAAtB,MAAAb,EAAAa,IAEA9C,EAAAD,QAAAyC,EAKAA,EAAAP,OAAA,CACA6C,MAAA,QACAC,MAAA,QACAC,KAAA,OACAC,IAAA,MACAC,KAAA,OACAC,MAAA,2CCzKAtF,EAAAU,EAAA6E,EAAA,sBAAAC,IAAA,IAAAC,EAAAzF,EAAA,IAae,SAASwF,EAChBE,GAEiC,IADjCC,EACiC3C,UAAAa,OAAA,QAAA+B,IAAA5C,UAAA,IAAAA,UAAA,GAC/B6C,EAAsB,YADS7C,UAAAa,OAAA,QAAA+B,IAAA5C,UAAA,GAAAA,UAAA,GAAhB,QACkB0C,EAAII,OAASJ,EAAIK,KAClDC,EAAS,GA4Bf,OAzBAH,GAAYA,EAAS7B,OAAO,GAAGJ,MAAM,KAAKqC,QAAQ,SAAAC,GAC9C,IAAMC,EAAQD,EAAKtC,MAAM,KACnBjC,EAAMwE,EAAM,GAElB,GAAKxE,EAAL,CAIA,IAAIN,EAEJ,IACIA,EAAQ8E,EAAM,GACTR,IACDtE,EACM+E,KAAKC,MAAMC,mBAAmBjF,GAAOkF,QAAQ,MAAO,OAEhE,MAAOC,GAIL,YAHAC,YACID,EADO,wCAAArC,OACoCuC,OAAOrF,KAI1D2E,EAAOrE,GAAON,KAGX2E,sCC9CX,SAAAW,GAAA3G,EAAAU,EAAA6E,EAAA,sBAAAqB,IAAA5G,EAAAU,EAAA6E,EAAA,sBAAAsB,IAAA7G,EAAAU,EAAA6E,EAAA,sBAAAkB,IAAA,IAAM1D,EAAS+D,EAAQ,IAAqBC,UAAUJ,GAS/C,SAASC,IASZ,OARKI,OAAOC,cACRD,OAAOC,YAAc,IAGpBD,OAAOC,YAAYC,MACpBF,OAAOC,YAAYC,IAAM,IAGtBF,OAAOC,YAAYC,IAkCvB,SAASL,EAAgBM,EAAgBC,GAC5C,IAAMC,EAAKvG,OAAOqG,GAElB,IAAK,IAAMG,KAAWF,EAClB,GAAIA,EAAOnF,eAAeqF,GAAU,CAChC,IAAMjG,EAAQ+F,EAAOE,QAEA,IAAVjG,IACPgG,EAAGC,GAAWjG,GAK1B,OAAOgG,EAUJ,SAASZ,EAAYD,GAA6B,IAAlBe,EAAkBvE,UAAAa,OAAA,QAAA+B,IAAA5C,UAAA,GAAAA,UAAA,GAAJ,GACjDD,EAAOL,MAAM6E,EAAKf,GAClBQ,OAAOQ,SAAWR,OAAOQ,QAAQD,EAAK,KAAM,KAAM,KAAMf,0FC/E5D,SAAAG,GAAA3G,EAAAU,EAAA6E,EAAA,sBAAAkC,IAAA,IAAM1E,EAAS+D,EAAQ,IAAqBC,UAAUJ,GAU/C,SAASc,EAAU/B,GACtB,OAAOgC,MAAMhC,GACRiC,KAAK,SAAAC,GACF,IAAMC,EAAUD,EAASE,OAEzB,OAAIF,EAASG,GACFF,EAGJA,EACFF,KAAK,SAAAK,GAAM,OAAIC,QAAQC,OAAOF,OAEtCG,MAAM,SAAAzF,GAGH,OAFAK,EAAOL,MAAM,wBAAyBgD,EAAKhD,GAEpCuF,QAAQC,OAAOxF,+gBCvBlC,IAAMK,EAAS+D,EAAQ,IAAqBC,UAAUJ,GAMzCyB,EAAkB,kBAOzBC,EAAwB,mCAQxBC,EAAyB,cAQzBC,EAAoB,WAYbC,EAAuB,2BA6BpC,SAASC,EAAoBC,GACzB,IAAMC,EAAQ,IAAIC,OAAJ,IAAAzE,OAAeqE,EAAf,KAAwC,MAChD1E,EAA8B6E,EAAME,KAAKH,GAE/C,GAAI5E,EAAO,CAGP,IAAIgF,EAAWhF,EAAMA,EAAMD,OAAS,GAAGkF,cAEtB,UAAbD,GAAqC,WAAbA,IACxBA,EAAW,WAKfJ,EAAMA,EAAIM,UAAUL,EAAMM,YAClBC,WAAW,QAGfR,EAAMI,EAAWJ,GAMzB,OAAOA,EAYJ,SAASS,EAATC,GAAoE,IAAlCC,EAAkCD,EAAlCC,SAC/BC,EAAsBD,EAASE,YAAY,KAEjD,OAC6B,IAAzBD,EACM,IACAD,EAASL,UAAU,EAAGM,EAAsB,GAY1D,SAASE,IAAkC,IAAVC,EAAUzG,UAAAa,OAAA,QAAA+B,IAAA5C,UAAA,GAAAA,UAAA,GAAJ,GAC7BgD,EAAS,GAEf,IAAK,IAAMrE,KAAO8H,EACd,IACIzD,EAAOpB,KAAP,GAAAT,OACOxC,EADP,KAAAwC,OACcuF,mBAAmBtD,KAAKuD,UAAUF,EAAI9H,OACtD,MAAO6E,GACLzD,EAAON,KAAP,kBAAA0B,OAA8BxC,EAA9B,MAAAwC,OAAsCqC,IAI9C,OAAOR,EAoBJ,SAAS4D,EAAuBC,GAGnC,IAIIlB,EACA7E,EAkDAuF,EAvDEI,EAAc,CAChBK,SAAUC,GAwBd,GAbAF,EAAMA,EAAItD,QAAQ,MAAO,KAIzBzC,GADA6E,EAAQ,IAAIC,OAAJ,IAAAzE,OAAeqE,GAAwB,OACjCK,KAAKgB,MAEfJ,EAAIX,SAAWhF,EAAM,GAAGiF,cACxBc,EAAMA,EAAIb,UAAUL,EAAMM,YAK9BnF,GADA6E,EAAQ,IAAIC,OAAJ,IAAAzE,OAAemE,GAA0B,OACnCO,KAAKgB,GACR,CACP,IAAIG,EAAoBlG,EAAM,GAAGkF,UAAmB,GAEpDa,EAAMA,EAAIb,UAAUL,EAAMM,WAG1B,IAAMgB,EAAmBD,EAAUjG,QAAQ,MAEjB,IAAtBkG,IACAD,EAAYA,EAAUhB,UAAUiB,EAAmB,IAGvDR,EAAIS,KAAOF,EAGX,IAAMG,EAAiBH,EAAUT,YAAY,MAErB,IAApBY,IACAV,EAAIW,KAAOJ,EAAUhB,UAAUmB,EAAiB,GAChDH,EAAYA,EAAUhB,UAAU,EAAGmB,IAIvCV,EAAIY,SAAWL,EAqBnB,IAhBAlG,GADA6E,EAAQ,IAAIC,OAAJ,IAAAzE,OAAeoE,GAAqB,OAC9BM,KAAKgB,MAKfR,EAAWvF,EAAM,GACjB+F,EAAMA,EAAIb,UAAUL,EAAMM,YAE1BI,EACAA,EAASH,WAAW,OAASG,EAAQ,IAAAlF,OAAOkF,IAE5CA,EAAW,IAEfI,EAAIJ,SAAWA,EAGXQ,EAAIX,WAAW,KAAM,CACrB,IAAIoB,EAAiBT,EAAI9F,QAAQ,IAAK,IAEd,IAApBuG,IACAA,EAAiBT,EAAIhG,QAEzB4F,EAAI3D,OAAS+D,EAAIb,UAAU,EAAGsB,GAC9BT,EAAMA,EAAIb,UAAUsB,QAEpBb,EAAI3D,OAAS,GAQjB,OAJA2D,EAAI1D,KAAO8D,EAAIX,WAAW,KAAOW,EAAM,GAIhCJ,EAsBJ,SAASc,EAAe7B,GAC3B,GAAmB,iBAARA,EAAX,CAIA,IAAMe,EAAMG,EAAuBnB,EAAoBC,IAMvDe,EAAIe,YAAcrB,EAAuBM,GAXA,IAcjCJ,EAAaI,EAAbJ,SAIFC,EAAsBD,EAASE,YAAY,KAC7CkB,EAAOpB,EAASL,UAAUM,EAAsB,SAAM1D,EAE1D,GAAI6E,EAAM,CACN,IAAMC,EA/Od,SAAkBD,GACd,OAAOA,EACDA,EAAKlE,QAAQ,IAAIqC,OAAOP,EAAuB,KAAM,IACrDoC,EA4OgBE,CAASF,GAEvBC,IAAcD,IACdA,EAAOC,EAIPjB,EAAIJ,SACEA,EAASL,UAAU,EAAGM,EAAsB,IAAMmB,GAAQ,KAKxE,OAFAhB,EAAIgB,KAAOA,EAEJhB,GAYX,SAASM,EAAqBa,GAAe,IAAAC,EAEUD,GAAQrG,KAAnDwB,EAFiC8E,EAEjC9E,KAAMmE,EAF2BW,EAE3BX,KAAMb,EAFqBwB,EAErBxB,SAAUP,EAFW+B,EAEX/B,SAAUhD,EAFC+E,EAED/E,OACpC+D,EAAM,GAWV,OATAf,IAAae,GAAOf,GAIpBoB,IAASL,GAAG,KAAA1F,OAAS+F,IACrBL,GAAOR,GAAY,IACnBvD,IAAW+D,GAAO/D,GAClBC,IAAS8D,GAAO9D,GAET8D,EAgBJ,SAASiB,EAAYrB,GACxB,IAAII,EAEJ,OAAAkB,EAAetB,IACf,IAAK,SACGA,IAEII,EADAJ,aAAeuB,IACTvB,EAAIwB,KAwBnB,SAA2BpK,GAC9B,IAAM6E,EAAMkE,EAAuBnB,EAAoB5H,EAAE6E,KAAO,KAGhE,IAAKA,EAAIoD,SAAU,CACf,IAAIA,EAAoBjI,EAAEiI,UAAYjI,EAAEqK,OAEpCpC,IAGAA,EAASqC,SAAS,OAASrC,GAAY,KACvCpD,EAAIoD,SAAWA,GAX2B,IAgB5CO,EAAa3D,EAAb2D,SAEN,IAAK3D,EAAIwE,KAAM,CAKX,IAAMkB,EAAkBvK,EAAEuK,QAAUvK,EAAEqJ,MAAQrJ,EAAEwJ,SAEhD,GAAIe,EAAQ,KAAAC,EAEFzB,EAKEnB,EAAmB,GAAAtE,OAAIiE,EAAJ,MAAAjE,OAAwBiH,KAN3ClB,EADAmB,EACAnB,KAAMG,EADNgB,EACMhB,SAAoBG,EAD1Ba,EACgBhC,SAAuBe,EADvCiB,EACuCjB,KAS3CF,IACAxE,EAAIwE,KAAOA,EACXxE,EAAI2E,SAAWA,EACf3E,EAAI0E,KAAOA,GAIF,MAAbf,GAAoC,MAAhBmB,IAAwBnB,EAAWmB,IAO/D,IAAMC,EAAO5J,EAAEyK,UAAYzK,EAAE4J,MAEzBA,IACQ/E,EAAI2D,SAAS8B,SAAS,MAClBzF,EAAI2D,SAAS8B,SAAb,IAAAhH,OAA0BsG,MACtCpB,EAAS8B,SAAS,OAAS9B,GAAY,KACvCA,GAAYoB,GAGhB/E,EAAI2D,SAAWA,EA1DmC,IA+D1CkC,EAAQ1K,EAAR0K,IAER,GAAIA,EAAK,KACCzF,EAAWJ,EAAXI,QAE2B,IAA7BA,EAAO/B,QAAQ,WAAgD,IAA7B+B,EAAO/B,QAAQ,WACjD+B,EAAOoD,WAAW,OAASpD,EAAM,IAAA3B,OAAO2B,IACtB,IAAlBA,EAAOjC,SAAiBiC,GAAU,KAClCA,GAAM,OAAA3B,OAAWoH,GAEjB7F,EAAII,OAASA,GAQrB,IAjFkD,IA+E5CC,EAASL,EAATK,KA/E4CyF,EAiFzB,CAAE,SAAU,mBAArCC,EAAA,EAAAA,EAAAD,EAAA3H,OAAA4H,IAA0D,CAArD,IAAMC,EAAUF,EAAAC,GACXE,EACAnC,EACE3I,EAAC,GAAAsD,OAAIuH,EAAJ,eACM7K,EAAE6K,IACF7K,EAAC,GAAAsD,OAAIuH,EAAJ,cAEhB,GAAIC,EAAe9H,OAAQ,CACvB,IAAI+H,EAAe,GAAAzH,OACVuH,EADU,KAAAvH,OACIwH,EAAeE,KAAf,IAAA1H,OAAwBuH,EAAxB,OAEnB3F,EAAKlC,OACL+H,EAAe,IAAAzH,OAAOyH,GAEtB7F,EAAO,IAEXA,GAAQ6F,GAMhB,OAFAlG,EAAIK,KAAOA,EAEJL,EAAIoE,iBAAclE,EA7HPkG,CAAkBrC,IAGhC,MAEJ,IAAK,SACDI,EAAMnD,OAAO+C,GAIjB,OAAOI,uEChWX,IAAAlH,EAAa3C,EAAQ,KAgDrB,SAAA+L,EAAAC,EAAAC,GACA1H,KAAAyH,aACAzH,KAAA2H,oBACAD,MAAAC,mBACAD,EAAAC,iBACA3H,KAAA4H,cACAF,KAAAE,cACAF,EAAAE,cAAA,IACA5H,KAAA6H,eACAH,KAAAG,eACAH,EAAAG,eAAA,IAGAtL,OAAA2D,KAAA9B,EAAAP,QAAA6D,QACA,SAAAoG,GAEA9H,KADA5B,EAAAP,OAAAiK,IACA,SAAAA,GACA9H,KAAA+H,KAAAjI,MAAAE,KAAAvB,YACSpB,KAAA2C,KAAA8H,IACJzK,KAAA2C,OAMLA,KAAAgI,oBAAA,KAMAhI,KAAAiI,MAAA,GAKAjI,KAAAkI,SAAA,EAMAlI,KAAAmI,YAAA,GAiBAX,EAAA/J,UAAA2H,UAAA,SAAAgD,GACA,IACA,OAAAvG,KAAAuD,UAAAgD,GACK,MAAAjK,GACL,uCAkBAqJ,EAAA/J,UAAA4K,iBACA,SAAAP,GAEA,IADA,IAAA9E,EAAA,GACAnH,EAAA,EAAAyM,EAAA7J,UAAAa,OAA2CzD,EAAAyM,EAASzM,IAAA,CACpD,IAAA0M,EAAA9J,UAAA5C,IAEAmE,KAAA2H,kBAAAG,IAAA1J,EAAAP,OAAAkD,OACA,iBAAAwH,IACAA,EAAAvI,KAAAoF,UAAAmD,IAEAvF,GAAAuF,EACA1M,GAAAyM,EAAA,IACAtF,GAAA,KAGA,OAAAA,EAAA1D,OAAA0D,EAAA,MASAwE,EAAA/J,UAAAsK,KAAA,WAGA,IAAA/E,EAAAhD,KAAAqI,iBAAAvI,MAAAE,KAAAvB,WACA,GAAAuE,EAAA,CAEA,IAAAwF,EACAxI,KAAAiI,MAAA3I,OAAAU,KAAAiI,MAAAjI,KAAAiI,MAAA3I,OAAA,QAAA+B,GAGA,iBAAAmH,IAAAC,KAAAD,IAEAxF,EACA,iBAAAwF,EACAA,EAAAE,OAAA,EAEA1I,KAAAiI,MAAAjI,KAAAiI,MAAA3I,OAAA,IACAmJ,KAAAzF,EACA0F,MAAA,IAIA1I,KAAAiI,MAAA5H,KAAA2C,GACAhD,KAAAkI,UAAAlF,EAAA1D,QAIAU,KAAAkI,UAAAlI,KAAA6H,gBACA7H,KAAA2I,QAAA,OAQAnB,EAAA/J,UAAAmL,MAAA,WACA5I,KAAA6I,8BAQArB,EAAA/J,UAAAoL,2BAAA,WACA7I,KAAAgI,sBACAvF,OAAAqG,aAAA9I,KAAAgI,qBACAhI,KAAAgI,oBAAA,MAGAhI,KAAAgI,oBACAvF,OAAAsG,WACA/I,KAAA2I,OAAAtL,KACA2C,MAAA,MACAA,KAAA4H,gBAOAJ,EAAA/J,UAAAuL,MAAA,WACAhJ,KAAA2I,QACA,GACA,IAcAnB,EAAA/J,UAAAkL,OAAA,SAAAM,EAAAC,GAEAlJ,KAAAkI,SAAA,IAAAlI,KAAAyH,WAAA0B,WAAAF,KAGAjJ,KAAAyH,WAAA0B,WAEAnJ,KAAAmI,YAAA7I,SACAU,KAAAmI,YAAAzG,QACA,SAAA0H,GACApJ,KAAAyH,WAAA4B,UAAAD,IACqB/L,KAAA2C,OAGrBA,KAAAmI,YAAA,IAGAnI,KAAAyH,WAAA4B,UAAArJ,KAAAiI,QAEAjI,KAAAmI,YAAA9H,KAAAL,KAAAiI,OAGAjI,KAAAiI,MAAA,GACAjI,KAAAkI,SAAA,GAGAgB,GACAlJ,KAAA6I,8BAQArB,EAAA/J,UAAA6L,KAAA,WAEAtJ,KAAA2I,QAAA,OAGA/M,EAAAD,QAAA6L,sBChRA,IAAApJ,EAAa3C,EAAQ,KACrB+L,EAAmB/L,EAAQ,KAwB3B8N,EAAA,GAKAC,EAAA,GAKAC,EAAArL,EAAAP,OAAA6C,MAGA9E,EAAAD,QAAA,CAMAwE,mBAAA,SAAAC,GACAhC,EAAA+B,mBAAAC,IAOAE,sBAAA,SAAAF,GACAhC,EAAAkC,sBAAAF,IAMAoC,UAAA,SAAA3C,EAAAF,EAAAI,GACA,IAAAvB,EAAA,IAAAJ,EAAAqL,EAAA5J,EAAAF,EAAAI,GAOA,OANAF,GACA0J,EAAA1J,GAAA0J,EAAA1J,IAAA,GACA0J,EAAA1J,GAAAQ,KAAA7B,IAEAgL,EAAAnJ,KAAA7B,GAEAA,GASAkL,gBAAA,SAAAhL,EAAAmB,GAEA,IADA,IAAA/D,EAAA+D,EAAA0J,EAAA1J,IAAA,GAAA2J,EACA3N,EAAA,EAAsBA,EAAAC,EAAAwD,OAAczD,IACpCC,EAAAD,GAAA4E,SAAA/B,IAOAiL,YAAA,SAAAjL,GACA+K,EAAA/K,EAEA,IADA,IAAA7C,EAAA,EACaA,EAAA2N,EAAAlK,OAAoBzD,IACjC2N,EAAA3N,GAAA4E,SAAA/B,GAGA,QAAAmB,KAAA0J,EAAA,CACA,IAAAzN,EAAAyN,EAAA1J,IAAA,GACA,IAAAhE,EAAA,EAAsBA,EAAAC,EAAAwD,OAAczD,IACpCC,EAAAD,GAAA4E,SAAA/B,KAOAb,OAAAO,EAAAP,OAIA2J,uEC9GO,SAASoC,EAAWzI,GACvB,OAAO,IAAIuC,QAAQ,SAACmG,EAASlG,GAAV,OACfjB,YAAYoH,KAAKC,WAAWH,WACxBzI,GACY,GACE,GACI,EACC0I,EACClG,KCbhC,IAOMqG,EAAa,mBAmBZ,SAASC,EAAcC,GAC1B,OAAOA,EAAIC,EAAU,EAAGD,EAAI5K,OAAS,IAmBlC,SAAS8K,EAAgB9K,GAC5B,OAAO+K,EAAc/K,EAAQ0K,GAU1B,SAASG,EAAUG,EAAaC,GACnC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,EAYzD,SAASD,EAAc/K,EAAQqL,GAG3B,IAFA,IAAIlH,EAAS,GAEJ5H,EAAI,EAAGA,EAAIyD,IAAUzD,EAC1B4H,GAAUwG,EAAcU,GAG5B,OAAOlH,eCnFXhI,EAAAU,EAAA6E,EAAA,sBAAA4J,EAAA,IAAAnP,EAAAU,EAAA6E,EAAA,sBAAA4J,EAAA,IAAAnP,EAAAU,EAAA6E,EAAA,sBAAA4J,EAAA,IAAAnP,EAAAU,EAAA6E,EAAA,sBAAA6J,EAAA,IAAApP,EAAAU,EAAA6E,EAAA,sBAAA4I,IAAAnO,EAAAU,EAAA6E,EAAA,sBAAAiJ,IAAAxO,EAAAU,EAAA6E,EAAA,sBAAAoJ,IAAA3O,EAAAU,EAAA6E,EAAA,sBAAAmJ,IAAA1O,EAAAU,EAAA6E,EAAA,sBAAAmD,EAAA,IAAA1I,EAAAU,EAAA6E,EAAA,sBAAAmD,EAAA,IAAA1I,EAAAU,EAAA6E,EAAA,sBAAAmD,EAAA,IAAA1I,EAAAU,EAAA6E,EAAA,sBAAAmD,EAAA,IAAA1I,EAAAU,EAAA6E,EAAA,sBAAAmD,EAAA,IAAA1I,EAAAU,EAAA6E,EAAA,sBAAAmD,EAAA,sCCSe,SAAS2G,IAAuB,IACnCC,EAAgBC,OAAhBD,YACFE,EAAOxI,OAAOyI,SAASpG,SAgB7B,OAZIiG,GAAsC,mBAAhBA,EACXA,EAAY/O,KAAKgP,OAAQC,GAO9BA,EAAKxG,UAAUwG,EAAKjG,YAAY,KAAO,GAAGR,oBACrCnD,EApBnB5F,EAAAU,EAAA6E,EAAA,sBAAA8J,sCCJArP,EAAAkB,EAAAqE,GAAA,IAAAmK,EAAA1P,EAAA,KAAA2P,EAAA3P,EAAA,KAiBA,GAA0C,mBAA/B4P,2BAA2C,CAElD,IAOItE,EAPA5F,EACEF,YAAewB,OAAOyI,UAAU,EAAM,QAChC,8BACDF,OAAOM,mBACZC,EACAtK,YAAewB,OAAOyI,UAAU,EAAM,QAAQ,sBAIpD,GAAI/J,IAAQ4F,EAAW+D,iBAAmBS,EAAY,CAClDpK,GAAG,SAAAvB,OAAamH,GAEhB,IAAMyE,EAAQvK,YAAewB,OAAOyI,UAAU,EAAM,UAAUlE,IAE1DwE,IACArK,GAAG,UAAAvB,OAAc4L,IAGrBH,2BACIlK,EACA,SAAAsK,GAGIhJ,OAAOiJ,eAAiB,CACpBC,OAAQ,UACRC,KAAMH,GAEVI,KAEJC,QAEJA,SAGJA,IASJ,SAASD,IACLpJ,OAAOsJ,KAC8B,UAA9BtJ,OAAOsJ,IAAIC,QAAQL,QACnBlJ,OAAOsJ,IAAIC,QAAQC,UAS9B,SAASH,EAAc3N,GAEnBA,GAASG,QAAQJ,KAAKC,GAItBsE,OAAOiJ,eAAiB,CACpBC,OAAQ,SAEZE","file":"do_external_connect.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/libs/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 887);\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 1) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo = getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            l.bind(t, logger.id? \"[\" + logger.id + \"]\" : \"\", \"<\" + callerInfo.methodName + \">: \")\n                .apply(t, args);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param format optional (NOT implemented) string.\n */\nfunction Logger(level, id, transports, format) {\n    this.id = id;\n    this.format = format;\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","/* @flow */\n\nimport { reportError } from '../util';\n\n/**\n * Parses the query/search or fragment/hash parameters out of a specific URL and\n * returns them as a JS object.\n *\n * @param {string} url - The URL to parse.\n * @param {boolean} dontParse - If falsy, some transformations (for parsing the\n * value as JSON) will be executed.\n * @param {string} source - If {@code 'search'}, the parameters will parsed out\n * of {@code url.search}; otherwise, out of {@code url.hash}.\n * @returns {Object}\n */\nexport default function parseURLParams(\n        url: URL,\n        dontParse: boolean = false,\n        source: string = 'hash'): Object {\n    const paramStr = source === 'search' ? url.search : url.hash;\n    const params = {};\n\n    // eslint-disable-next-line newline-per-chained-call\n    paramStr && paramStr.substr(1).split('&').forEach(part => {\n        const param = part.split('=');\n        const key = param[0];\n\n        if (!key) {\n            return;\n        }\n\n        let value;\n\n        try {\n            value = param[1];\n            if (!dontParse) {\n                value\n                    = JSON.parse(decodeURIComponent(value).replace(/\\\\&/, '&'));\n            }\n        } catch (e) {\n            reportError(\n                e, `Failed to parse URL parameter value: ${String(value)}`);\n\n            return;\n        }\n        params[key] = value;\n    });\n\n    return params;\n}\n","// @flow\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Returns the namespace for all global variables, functions, etc that we need.\n *\n * @returns {Object} The namespace.\n *\n * NOTE: After React-ifying everything this should be the only global.\n */\nexport function getJitsiMeetGlobalNS() {\n    if (!window.JitsiMeetJS) {\n        window.JitsiMeetJS = {};\n    }\n\n    if (!window.JitsiMeetJS.app) {\n        window.JitsiMeetJS.app = {};\n    }\n\n    return window.JitsiMeetJS.app;\n}\n\n/**\n * Gets the description of a specific {@code Symbol}.\n *\n * @param {Symbol} symbol - The {@code Symbol} to retrieve the description of.\n * @private\n * @returns {string} The description of {@code symbol}.\n */\nexport function getSymbolDescription(symbol: ?Symbol) {\n    let description = symbol ? symbol.toString() : 'undefined';\n\n    if (description.startsWith('Symbol(') && description.endsWith(')')) {\n        description = description.slice(7, -1);\n    }\n\n    // The polyfill es6-symbol that we use does not appear to comply with the\n    // Symbol standard and, merely, adds @@ at the beginning of the description.\n    if (description.startsWith('@@')) {\n        description = description.slice(2);\n    }\n\n    return description;\n}\n\n/**\n * A helper function that behaves similar to Object.assign, but only reassigns a\n * property in target if it's defined in source.\n *\n * @param {Object} target - The target object to assign the values into.\n * @param {Object} source - The source object.\n * @returns {Object}\n */\nexport function assignIfDefined(target: Object, source: Object) {\n    const to = Object(target);\n\n    for (const nextKey in source) {\n        if (source.hasOwnProperty(nextKey)) {\n            const value = source[nextKey];\n\n            if (typeof value !== 'undefined') {\n                to[nextKey] = value;\n            }\n        }\n    }\n\n    return to;\n}\n\n/**\n * Prints the error and reports it to the global error handler.\n *\n * @param {Error} e - The error object.\n * @param {string} msg - A custom message to print in addition to the error.\n * @returns {void}\n */\nexport function reportError(e: Object, msg: string = '') {\n    logger.error(msg, e);\n    window.onerror && window.onerror(msg, null, null, null, e);\n}\n","const logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Wrapper around fetch GET requests to handle json-ifying the response\n * and logging errors.\n *\n * @param {string} url - The URL to perform a GET against.\n * @returns {Promise<Object>} The response body, in JSON format, will be\n * through the Promise.\n */\nexport function doGetJSON(url) {\n    return fetch(url)\n        .then(response => {\n            const jsonify = response.json();\n\n            if (response.ok) {\n                return jsonify;\n            }\n\n            return jsonify\n                .then(result => Promise.reject(result));\n        })\n        .catch(error => {\n            logger.error('Error performing get:', url, error);\n\n            return Promise.reject(error);\n        });\n}\n","// @flow\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The app linking scheme.\n * TODO: This should be read from the manifest files later.\n */\nexport const APP_LINK_SCHEME = 'org.jitsi.meet:';\n\n/**\n * A list of characters to be excluded/removed from the room component/segment\n * of a conference/meeting URI/URL. The list is based on RFC 3986 and the jxmpp\n * library utilized by jicofo.\n */\nconst _ROOM_EXCLUDE_PATTERN = '[\\\\:\\\\?#\\\\[\\\\]@!$&\\'()*+,;=></\"]';\n\n/**\n * The {@link RegExp} pattern of the authority of a URI.\n *\n * @private\n * @type {string}\n */\nconst _URI_AUTHORITY_PATTERN = '(//[^/?#]+)';\n\n/**\n * The {@link RegExp} pattern of the path of a URI.\n *\n * @private\n * @type {string}\n */\nconst _URI_PATH_PATTERN = '([^?#]*)';\n\n/**\n * The {@link RegExp} pattern of the protocol of a URI.\n *\n * FIXME: The URL class exposed by JavaScript will not include the colon in\n * the protocol field. Also in other places (at the time of this writing:\n * the DeepLinkingMobilePage.js) the APP_LINK_SCHEME does not include\n * the double dots, so things are inconsistent.\n *\n * @type {string}\n */\nexport const URI_PROTOCOL_PATTERN = '([a-z][a-z0-9\\\\.\\\\+-]*:)';\n\n/**\n * Excludes/removes certain characters from a specific room (name) which are\n * incompatible with Jitsi Meet on the client and/or server sides.\n *\n * @param {?string} room - The room (name) to fix.\n * @private\n * @returns {?string}\n */\nfunction _fixRoom(room: ?string) {\n    return room\n        ? room.replace(new RegExp(_ROOM_EXCLUDE_PATTERN, 'g'), '')\n        : room;\n}\n\n/**\n * Fixes the scheme part of a specific URI (string) so that it contains a\n * well-known scheme such as HTTP(S). For example, the mobile app implements an\n * app-specific URI scheme in addition to Universal Links. The app-specific\n * scheme may precede or replace the well-known scheme. In such a case, dealing\n * with the app-specific scheme only complicates the logic and it is simpler to\n * get rid of it (by translating the app-specific scheme into a well-known\n * scheme).\n *\n * @param {string} uri - The URI (string) to fix the scheme of.\n * @private\n * @returns {string}\n */\nfunction _fixURIStringScheme(uri: string) {\n    const regex = new RegExp(`^${URI_PROTOCOL_PATTERN}+`, 'gi');\n    const match: Array<string> | null = regex.exec(uri);\n\n    if (match) {\n        // As an implementation convenience, pick up the last scheme and make\n        // sure that it is a well-known one.\n        let protocol = match[match.length - 1].toLowerCase();\n\n        if (protocol !== 'http:' && protocol !== 'https:') {\n            protocol = 'https:';\n        }\n\n        /* eslint-disable no-param-reassign */\n\n        uri = uri.substring(regex.lastIndex);\n        if (uri.startsWith('//')) {\n            // The specified URL was not a room name only, it contained an\n            // authority.\n            uri = protocol + uri;\n        }\n\n        /* eslint-enable no-param-reassign */\n    }\n\n    return uri;\n}\n\n/**\n * Gets the (Web application) context root defined by a specific location (URI).\n *\n * @param {Object} location - The location (URI) which defines the (Web\n * application) context root.\n * @public\n * @returns {string} - The (Web application) context root defined by the\n * specified {@code location} (URI).\n */\nexport function getLocationContextRoot({ pathname }: { pathname: string }) {\n    const contextRootEndIndex = pathname.lastIndexOf('/');\n\n    return (\n        contextRootEndIndex === -1\n            ? '/'\n            : pathname.substring(0, contextRootEndIndex + 1));\n}\n\n/**\n * Constructs a new {@code Array} with URL parameter {@code String}s out of a\n * specific {@code Object}.\n *\n * @param {Object} obj - The {@code Object} to turn into URL parameter\n * {@code String}s.\n * @returns {Array<string>} The {@code Array} with URL parameter {@code String}s\n * constructed out of the specified {@code obj}.\n */\nfunction _objectToURLParamsArray(obj = {}) {\n    const params = [];\n\n    for (const key in obj) { // eslint-disable-line guard-for-in\n        try {\n            params.push(\n                `${key}=${encodeURIComponent(JSON.stringify(obj[key]))}`);\n        } catch (e) {\n            logger.warn(`Error encoding ${key}: ${e}`);\n        }\n    }\n\n    return params;\n}\n\n/**\n * Parses a specific URI string into an object with the well-known properties of\n * the {@link Location} and/or {@link URL} interfaces implemented by Web\n * browsers. The parsing attempts to be in accord with IETF's RFC 3986.\n *\n * @param {string} str - The URI string to parse.\n * @public\n * @returns {{\n *     hash: string,\n *     host: (string|undefined),\n *     hostname: (string|undefined),\n *     pathname: string,\n *     port: (string|undefined),\n *     protocol: (string|undefined),\n *     search: string\n * }}\n */\nexport function parseStandardURIString(str: string) {\n    /* eslint-disable no-param-reassign */\n\n    const obj: Object = {\n        toString: _standardURIToString\n    };\n\n    let regex;\n    let match: Array<string> | null;\n\n    // XXX A URI string as defined by RFC 3986 does not contain any whitespace.\n    // Usually, a browser will have already encoded any whitespace. In order to\n    // avoid potential later problems related to whitespace in URI, strip any\n    // whitespace. Anyway, the Jitsi Meet app is not known to utilize unencoded\n    // whitespace so the stripping is deemed safe.\n    str = str.replace(/\\s/g, '');\n\n    // protocol\n    regex = new RegExp(`^${URI_PROTOCOL_PATTERN}`, 'gi');\n    match = regex.exec(str);\n    if (match) {\n        obj.protocol = match[1].toLowerCase();\n        str = str.substring(regex.lastIndex);\n    }\n\n    // authority\n    regex = new RegExp(`^${_URI_AUTHORITY_PATTERN}`, 'gi');\n    match = regex.exec(str);\n    if (match) {\n        let authority: string = match[1].substring(/* // */ 2);\n\n        str = str.substring(regex.lastIndex);\n\n        // userinfo\n        const userinfoEndIndex = authority.indexOf('@');\n\n        if (userinfoEndIndex !== -1) {\n            authority = authority.substring(userinfoEndIndex + 1);\n        }\n\n        obj.host = authority;\n\n        // port\n        const portBeginIndex = authority.lastIndexOf(':');\n\n        if (portBeginIndex !== -1) {\n            obj.port = authority.substring(portBeginIndex + 1);\n            authority = authority.substring(0, portBeginIndex);\n        }\n\n        // hostname\n        obj.hostname = authority;\n    }\n\n    // pathname\n    regex = new RegExp(`^${_URI_PATH_PATTERN}`, 'gi');\n    match = regex.exec(str);\n\n    let pathname: ?string;\n\n    if (match) {\n        pathname = match[1];\n        str = str.substring(regex.lastIndex);\n    }\n    if (pathname) {\n        pathname.startsWith('/') || (pathname = `/${pathname}`);\n    } else {\n        pathname = '/';\n    }\n    obj.pathname = pathname;\n\n    // query\n    if (str.startsWith('?')) {\n        let hashBeginIndex = str.indexOf('#', 1);\n\n        if (hashBeginIndex === -1) {\n            hashBeginIndex = str.length;\n        }\n        obj.search = str.substring(0, hashBeginIndex);\n        str = str.substring(hashBeginIndex);\n    } else {\n        obj.search = ''; // Google Chrome\n    }\n\n    // fragment\n    obj.hash = str.startsWith('#') ? str : '';\n\n    /* eslint-enable no-param-reassign */\n\n    return obj;\n}\n\n/**\n * Parses a specific URI which (supposedly) references a Jitsi Meet resource\n * (location).\n *\n * @param {(string|undefined)} uri - The URI to parse which (supposedly)\n * references a Jitsi Meet resource (location).\n * @public\n * @returns {{\n *     contextRoot: string,\n *     hash: string,\n *     host: string,\n *     hostname: string,\n *     pathname: string,\n *     port: string,\n *     protocol: string,\n *     room: (string|undefined),\n *     search: string\n * }}\n */\nexport function parseURIString(uri: ?string) {\n    if (typeof uri !== 'string') {\n        return undefined;\n    }\n\n    const obj = parseStandardURIString(_fixURIStringScheme(uri));\n\n    // Add the properties that are specific to a Jitsi Meet resource (location)\n    // such as contextRoot, room:\n\n    // contextRoot\n    obj.contextRoot = getLocationContextRoot(obj);\n\n    // The room (name) is the last component/segment of pathname.\n    const { pathname } = obj;\n\n    // XXX While the components/segments of pathname are URI encoded, Jitsi Meet\n    // on the client and/or server sides still don't support certain characters.\n    const contextRootEndIndex = pathname.lastIndexOf('/');\n    let room = pathname.substring(contextRootEndIndex + 1) || undefined;\n\n    if (room) {\n        const fixedRoom = _fixRoom(room);\n\n        if (fixedRoom !== room) {\n            room = fixedRoom;\n\n            // XXX Drive fixedRoom into pathname (because room is derived from\n            // pathname).\n            obj.pathname\n                = pathname.substring(0, contextRootEndIndex + 1) + (room || '');\n        }\n    }\n    obj.room = room;\n\n    return obj;\n}\n\n/**\n * Implements {@code href} and {@code toString} for the {@code Object} returned\n * by {@link #parseStandardURIString}.\n *\n * @param {Object} [thiz] - An {@code Object} returned by\n * {@code #parseStandardURIString} if any; otherwise, it is presumed that the\n * function is invoked on such an instance.\n * @returns {string}\n */\nfunction _standardURIToString(thiz: ?Object) {\n    // eslint-disable-next-line no-invalid-this\n    const { hash, host, pathname, protocol, search } = thiz || this;\n    let str = '';\n\n    protocol && (str += protocol);\n\n    // TODO userinfo\n\n    host && (str += `//${host}`);\n    str += pathname || '/';\n    search && (str += search);\n    hash && (str += hash);\n\n    return str;\n}\n\n/**\n * Attempts to return a {@code String} representation of a specific\n * {@code Object} which is supposed to represent a URL. Obviously, if a\n * {@code String} is specified, it is returned. If a {@code URL} is specified,\n * its {@code URL#href} is returned. Additionally, an {@code Object} similar to\n * the one accepted by the constructor of Web's ExternalAPI is supported on both\n * mobile/React Native and Web/React.\n *\n * @param {Object|string} obj - The URL to return a {@code String}\n * representation of.\n * @returns {string} - A {@code String} representation of the specified\n * {@code obj} which is supposed to represent a URL.\n */\nexport function toURLString(obj: ?(Object | string)): ?string {\n    let str;\n\n    switch (typeof obj) {\n    case 'object':\n        if (obj) {\n            if (obj instanceof URL) {\n                str = obj.href;\n            } else {\n                str = urlObjectToString(obj);\n            }\n        }\n        break;\n\n    case 'string':\n        str = String(obj);\n        break;\n    }\n\n    return str;\n}\n\n/**\n * Attempts to return a {@code String} representation of a specific\n * {@code Object} similar to the one accepted by the constructor\n * of Web's ExternalAPI.\n *\n * @param {Object} o - The URL to return a {@code String} representation of.\n * @returns {string} - A {@code String} representation of the specified\n * {@code Object}.\n */\nexport function urlObjectToString(o: Object): ?string {\n    const url = parseStandardURIString(_fixURIStringScheme(o.url || ''));\n\n    // protocol\n    if (!url.protocol) {\n        let protocol: ?string = o.protocol || o.scheme;\n\n        if (protocol) {\n            // Protocol is supposed to be the scheme and the final ':'. Anyway,\n            // do not make a fuss if the final ':' is not there.\n            protocol.endsWith(':') || (protocol += ':');\n            url.protocol = protocol;\n        }\n    }\n\n    // authority & pathname\n    let { pathname } = url;\n\n    if (!url.host) {\n        // Web's ExternalAPI domain\n        //\n        // It may be host/hostname and pathname with the latter denoting the\n        // tenant.\n        const domain: ?string = o.domain || o.host || o.hostname;\n\n        if (domain) {\n            const { host, hostname, pathname: contextRoot, port }\n                = parseStandardURIString(\n\n                    // XXX The value of domain in supposed to be host/hostname\n                    // and, optionally, pathname. Make sure it is not taken for\n                    // a pathname only.\n                    _fixURIStringScheme(`${APP_LINK_SCHEME}//${domain}`));\n\n            // authority\n            if (host) {\n                url.host = host;\n                url.hostname = hostname;\n                url.port = port;\n            }\n\n            // pathname\n            pathname === '/' && contextRoot !== '/' && (pathname = contextRoot);\n        }\n    }\n\n    // pathname\n\n    // Web's ExternalAPI roomName\n    const room = o.roomName || o.room;\n\n    if (room\n            && (url.pathname.endsWith('/')\n                || !url.pathname.endsWith(`/${room}`))) {\n        pathname.endsWith('/') || (pathname += '/');\n        pathname += room;\n    }\n\n    url.pathname = pathname;\n\n    // query/search\n\n    // Web's ExternalAPI jwt\n    const { jwt } = o;\n\n    if (jwt) {\n        let { search } = url;\n\n        if (search.indexOf('?jwt=') === -1 && search.indexOf('&jwt=') === -1) {\n            search.startsWith('?') || (search = `?${search}`);\n            search.length === 1 || (search += '&');\n            search += `jwt=${jwt}`;\n\n            url.search = search;\n        }\n    }\n\n    // fragment/hash\n\n    let { hash } = url;\n\n    for (const configName of [ 'config', 'interfaceConfig' ]) {\n        const urlParamsArray\n            = _objectToURLParamsArray(\n                o[`${configName}Overwrite`]\n                    || o[configName]\n                    || o[`${configName}Override`]);\n\n        if (urlParamsArray.length) {\n            let urlParamsString\n                = `${configName}.${urlParamsArray.join(`&${configName}.`)}`;\n\n            if (hash.length) {\n                urlParamsString = `&${urlParamsString}`;\n            } else {\n                hash = '#';\n            }\n            hash += urlParamsString;\n        }\n    }\n\n    url.hash = hash;\n\n    return url.toString() || undefined;\n}\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects\n        = options && options.stringifyObjects\n            ? options.stringifyObjects : false;\n    this.storeInterval\n        = options && options.storeInterval\n            ? options.storeInterval: 30000;\n    this.maxEntryLength\n        = options && options.maxEntryLength\n            ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function (logLevel) {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return \"[object with circular refs?]\";\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage\n= function (logLevel/*, arg1, arg2, arg3... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR)\n            && typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i != len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage\n            = this.queue.length ? this.queue[this.queue.length -1] : undefined;\n        // NOTE that typeof undefined is 'undefined'\n        var prevMessageText\n            = typeof prevMessage === 'object' ? prevMessage.text : prevMessage;\n        // Is it the same as the previous one ?\n        if (prevMessageText == msg) {\n            if (typeof prevMessage === 'object') {\n                prevMessage.count += 1;\n            } else {\n                this.queue[this.queue.length-1] = {\n                    text: msg,\n                    count: 2\n                }\n            }\n        } else {\n            this.queue.push(msg);\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID\n        = window.setTimeout(\n            this._flush.bind(\n                this, false /* do not force */, true /* reschedule */),\n            this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ )\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, format) {\n        var logger = new Logger(curLevel, id, transports, format);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","// @flow\n\ndeclare var JitsiMeetJS: Object;\n\n/**\n * Loads a script from a specific URL. The script will be interpreted upon load.\n *\n * @param {string} url - The url to be loaded.\n * @returns {Promise} Resolved with no arguments when the script is loaded and\n * rejected with the error from JitsiMeetJS.ScriptUtil.loadScript method.\n */\nexport function loadScript(url: string): Promise<void> {\n    return new Promise((resolve, reject) =>\n        JitsiMeetJS.util.ScriptUtil.loadScript(\n            url,\n            /* async */ true,\n            /* prepend */ false,\n            /* relativeURL */ false,\n            /* loadCallback */ resolve,\n            /* errorCallback */ reject));\n}\n","// @flow\n\n/**\n * Alphanumeric characters.\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digit characters.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generate a string with random alphanumeric characters with a specific length.\n *\n * @param {number} length - The length of the string to return.\n * @returns {string} A string of random alphanumeric characters with the\n * specified length.\n */\nexport function randomAlphanumString(length: number) {\n    return _randomString(length, ALPHANUM);\n}\n\n/**\n * Get random element of array or string.\n *\n * @param {Array|string} arr - Source.\n * @returns {Array|string} Array element or string character.\n */\nexport function randomElement(arr: Array<*> | string) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Returns a random hex digit.\n *\n * @returns {Array|string}\n */\nexport function randomHexDigit() {\n    return randomElement(HEX_DIGITS);\n}\n\n/**\n * Generates a string of random hexadecimal digits with a specific length.\n *\n * @param {number} length - The length of the string to return.\n * @returns {string} A string of random hexadecimal digits with the specified\n * length.\n */\nexport function randomHexString(length: number) {\n    return _randomString(length, HEX_DIGITS);\n}\n\n/**\n * Generates random int within the range [min, max].\n *\n * @param {number} min - The minimum value for the generated number.\n * @param {number} max - The maximum value for the generated number.\n * @returns {number} Random int number.\n */\nexport function randomInt(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Generates a string of random characters with a specific length.\n *\n * @param {number} length - The length of the string to return.\n * @param {string} characters - The characters from which the returned string is\n * to be constructed.\n * @private\n * @returns {string} A string of random characters with the specified length.\n */\nfunction _randomString(length, characters) {\n    let result = '';\n\n    for (let i = 0; i < length; ++i) {\n        result += randomElement(characters);\n    }\n\n    return result;\n}\n","export * from './helpers';\nexport * from './httpUtils';\nexport * from './loadScript';\nexport * from './randomUtil';\nexport * from './uri';\n","/* @flow */\n\ndeclare var config: Object;\n\n/**\n * Builds and returns the room name.\n *\n * @returns {string}\n */\nexport default function getRoomName(): ?string {\n    const { getroomnode } = config;\n    const path = window.location.pathname;\n    let roomName;\n\n    // Determine the room node from the URL.\n    if (getroomnode && typeof getroomnode === 'function') {\n        roomName = getroomnode.call(config, path);\n    } else {\n        // Fall back to the default strategy of making assumptions about how the\n        // URL maps to the room (name). It currently assumes a deployment in\n        // which the last non-directory component of the path (name) is the\n        // room.\n        roomName\n            = path.substring(path.lastIndexOf('/') + 1).toLowerCase()\n                || undefined;\n    }\n\n    return roomName;\n}\n","/* global config, createConnectionExternally */\n\nimport getRoomName from '../react/features/base/config/getRoomName';\nimport parseURLParams from '../react/features/base/config/parseURLParams';\n\n/**\n * Implements external connect using createConnectionExternally function defined\n * in external_connect.js for Jitsi Meet. Parses the room name and JSON Web\n * Token (JWT) from the URL and executes createConnectionExternally.\n *\n * NOTE: If you are using lib-jitsi-meet without Jitsi Meet, you should use this\n * file as reference only because the implementation is Jitsi Meet-specific.\n *\n * NOTE: For optimal results this file should be included right after\n * external_connect.js.\n */\n\nif (typeof createConnectionExternally === 'function') {\n    // URL params have higher priority than config params.\n    let url\n        = parseURLParams(window.location, true, 'hash')[\n                'config.externalConnectUrl']\n            || config.externalConnectUrl;\n    const isRecorder\n        = parseURLParams(window.location, true, 'hash')['config.iAmRecorder'];\n\n    let roomName;\n\n    if (url && (roomName = getRoomName()) && !isRecorder) {\n        url += `?room=${roomName}`;\n\n        const token = parseURLParams(window.location, true, 'search').jwt;\n\n        if (token) {\n            url += `&token=${token}`;\n        }\n\n        createConnectionExternally(\n            url,\n            connectionInfo => {\n                // Sets that global variable to be used later by connect method\n                // in connection.js.\n                window.XMPPAttachInfo = {\n                    status: 'success',\n                    data: connectionInfo\n                };\n                checkForConnectHandlerAndConnect();\n            },\n            errorCallback);\n    } else {\n        errorCallback();\n    }\n} else {\n    errorCallback();\n}\n\n/**\n * Check if connect from connection.js was executed and executes the handler\n * that is going to finish the connect work.\n *\n * @returns {void}\n */\nfunction checkForConnectHandlerAndConnect() {\n    window.APP\n        && window.APP.connect.status === 'ready'\n        && window.APP.connect.handler();\n}\n\n/**\n * Implements a callback to be invoked if anything goes wrong.\n *\n * @param {Error} error - The specifics of what went wrong.\n * @returns {void}\n */\nfunction errorCallback(error) {\n    // The value of error is undefined if external connect is disabled.\n    error && console.warn(error);\n\n    // Sets that global variable to be used later by connect method in\n    // connection.js.\n    window.XMPPAttachInfo = {\n        status: 'error'\n    };\n    checkForConnectHandlerAndConnect();\n}\n"],"sourceRoot":""}